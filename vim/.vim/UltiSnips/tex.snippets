snippet today "Date"
`date +%F`
endsnippet

snippet beg "begin{} \ end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet md "Math" wA
\[
	$1
.\]$0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet

snippet ;a "alpha" iA
\alpha
endsnippet

snippet ;b "beta" iA
\beta
endsnippet

snippet ;c "gamma" iA
\gamma
endsnippet

snippet ;C "Gamma" iA
\Gamma
endsnippet

snippet ;d "delta" iA
\delta
endsnippet

snippet ;D "Delta" iA
\Delta
endsnippet

snippet ;e "epsilon" iA
\epsilon
endsnippet

snippet ;l "lambda" iA
\lambda
endsnippet

snippet ;o "omega" iA
\omega
endsnippet

snippet ;p "phi" iA
\phi
endsnippet

snippet ;P "Phi" iA
\Phi
endsnippet

snippet ;vp "varphi" iA
\varphi
endsnippet

snippet ;t "theta" iA
\theta
endsnippet

snippet NN "Natuurlijke getallen" wA
\mathbb{N}
endsnippet

snippet RR "Reële getallen" wA
\mathbb{R}
endsnippet

snippet QQ "Rationale getallen" wA
\mathbb{Q}
endsnippet

snippet ZZ "Gehele getallen" wA
\mathbb{Z}
endsnippet

snippet CC "Complexe getallen" wA
\mathbb{C}
endsnippet

snippet FF "Veld" wA
\mathbb{F}
endsnippet

snippet * "Scalaire vermenigvuldiging" wA
\cdot
endsnippet

snippet xx "Vectoriële vermenigvuldiging" w
\times
endsnippet

snippet -> "enkele kleine pijl" wA
\rightarrow
endsnippet

snippet => "dubbele kleine pijl" wA
\implies
endsnippet

snippet ==> "dubbele grote pijl" wA
\Longrightarrow
endsnippet

snippet --> "enkele grote pijl" wA
\longrightarrow
endsnippet

snippet UU "cup" w
\cup
endsnippet

snippet Nn "cap" w
\cap
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# snippet / "Fraction" iA
# \\frac{${VISUAL}}{$1}$0
# endsnippet

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

snippet fun "Functie" W
f: $1 \to $2: x \mapsto $3 $0
endsnippet

snippet || "mid"
\mid
endsnippet

# maak vak specifieke snippets zoals
snippet ek
\frac{1}{2} m \vec{v}^2
endsnippet

snippet tt
\text{$1}$0
endsnippet

snippet it
\textit{$1}$0
endsnippet

snippet bf
\textbf{$1}$0
endsnippet

snippet lim "limiet" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
