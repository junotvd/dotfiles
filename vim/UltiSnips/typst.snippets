global !p
def math():
    # Very naive math detection: checks if current line has $...$ or starts with block math
    line = vim.current.line
    return "$" in line

def comment():
    # Typst comments start with //
    line = vim.current.line.strip()
    return line.startswith("//")

def env(name):
    # Detect if inside an environment like #figure(..), #math(..), etc.
    # Naive approach scanning previous lines
    row, _ = vim.current.window.cursor
    start_pat = f"#{name}("
    end_pat = ")"
    for i in range(row - 1, -1, -1):
        l = vim.current.buffer[i].strip()
        if start_pat in l:
            return True
        if end_pat in l:
            return False
    return False
endglobal

snippet adhv "aan de hand van" w
aand de hand van
endsnippet

snippet Adhv "Aan de hand van" w
Aand de hand van
endsnippet

snippet asa "Als en slechts als" w
als en slechts als
endsnippet

snippet dmv "door middel van" w
door middel van
endsnippet

snippet mbv "met behulp van" w
met behulp van
endsnippet

snippet Mbv "met behulp van" w
Met behulp van
endsnippet

snippet Dmv "Door middel van" w
Door middel van
endsnippet

snippet maw "met andere woorden," w
met andere woorden
endsnippet

snippet Maw "Met andere woorden," w
Met andere woorden
endsnippet

snippet tov "ten opzichte van" w
ten opzichte van
endsnippet

snippet Tov "Ten opzichte van" w
Ten opzichte van
endsnippet

snippet mbt "met betrekking tot" w
met betrekking tot
endsnippet

snippet tgv "ten gevolge van" w
ten gevolge van
endsnippet

snippet Tgv "Ten gevolge van" w
Ten gevolge van
endsnippet

snippet Mbt "Met betrekking tot" w
Met betrekking tot
endsnippet

snippet resp "respectievelijk" w
respectievelijk
endsnippet

snippet dwz "dit wil zeggen" w
dit wil zeggen
endsnippet

snippet Dwz "dit wil zeggen" w
Dit wil zeggen
endsnippet

snippet nl "namelijk" w
namelijk
endsnippet

snippet Nl "Namelijk" w
Namelijk
endsnippet

snippet ifv "in functie van" w
in functie van
endsnippet

snippet Ifv "In functie van" w
In functie van
endsnippet

snippet ipv "in plaats van" w
in plaats van
endsnippet

snippet Ipv "In plaats van" w
In plaats van
endsnippet

snippet mk "math inline" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':', ';', '!', ')', ']', '}']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet "md" "math display" wA
$ ${1} $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':', ';', '!', ')', ']', '}']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
arrow(`!p snip.rv=match.group(1)`)
endsnippet
