#!/usr/bin/env python3

import subprocess
import re

def run_cmd(cmd):
    return subprocess.run(cmd, shell=True, capture_output=True, text=True).stdout.strip()

def rofi_prompt(options, prompt="Select:"):
    return run_cmd(f"printf '{options}' | rofi -dmenu -p '{prompt}'")

def get_connected_screens():
    xrandr_output = run_cmd("xrandr -q")
    return [line.split()[0] for line in xrandr_output.splitlines() if " connected" in line]

def get_resolution(display):
    res_block = run_cmd(f"xrandr --query | sed -n '/^{display}/,/\\+/p'").splitlines()
    last_line = res_block[-1] if res_block else ""
    return re.match(r"(\d+x\d+)", last_line).group(1) if last_line else "0x0"

def parse_res(res):
    x, y = map(int, res.split('x'))
    return x, y

def twoscreen(screens):
    mirror = rofi_prompt("no\nyes", "Mirror displays?")
    if mirror == "yes":
        external = rofi_prompt('\n'.join(screens), "Optimize resolution for:")
        internal = [s for s in screens if s != external][0]

        res_ext = get_resolution(external)
        res_int = get_resolution(internal)

        x_ext, y_ext = parse_res(res_ext)
        x_int, y_int = parse_res(res_int)

        scale_x = x_ext / x_int
        scale_y = y_ext / y_int

        subprocess.run(f"xrandr --output {external} --auto --scale 1.0x1.0 "
                       f"--output {internal} --auto --same-as {external} "
                       f"--scale {scale_x}x{scale_y}", shell=True)
    else:
        primary = rofi_prompt('\n'.join(screens), "Select primary display:")
        secondary = [s for s in screens if s != primary][0]
        direction = rofi_prompt("left\nright", f"What side of {primary} should {secondary} be on?")
        subprocess.run(f"xrandr --output {primary} --auto --scale 1.0x1.0 "
                       f"--output {secondary} --{direction}-of {primary} --auto --scale 1.0x1.0", shell=True)

def morescreen(screens):
    primary = rofi_prompt('\n'.join(screens), "Select primary display:")
    secondary = rofi_prompt('\n'.join([s for s in screens if s != primary]), "Select secondary display:")
    direction = rofi_prompt("left\nright", f"What side of {primary} should {secondary} be on?")
    tertiary = rofi_prompt('\n'.join([s for s in screens if s != primary and s != secondary]), "Select third display:")
    opp_dir = "right" if direction == "left" else "left"
    subprocess.run(f"xrandr --output {primary} --auto "
                   f"--output {secondary} --{direction}-of {primary} --auto "
                   f"--output {tertiary} --{opp_dir}-of {primary} --auto", shell=True)

def onescreen(screen, all_screens):
    off_cmds = ' '.join([f"--output {s} --off" for s in all_screens if s != screen])
    subprocess.run(f"xrandr --output {screen} --auto --scale 1.0x1.0 {off_cmds}", shell=True)

def postrun():
    subprocess.run("setbg", shell=True)
    subprocess.run("{ killall dunst ; setsid -f dunst ; } >/dev/null 2>&1", shell=True)

def main():
    screens = get_connected_screens()

    if len(screens) < 2:
        onescreen(screens[0], screens)
        postrun()
        subprocess.run("notify-send 'ðŸ’» Only one screen detected.' 'Using it in its optimal settings...'", shell=True)
        return

    choices = '\n'.join(screens + ["multi-monitor", "manual selection"])
    chosen = rofi_prompt(choices, "Select display arrangement:")

    if chosen == "manual selection":
        subprocess.run("arandr", shell=True)
        return
    elif chosen == "multi-monitor":
        if len(screens) == 2:
            twoscreen(screens)
        else:
            morescreen(screens)
    else:
        onescreen(chosen, screens)

    postrun()

if __name__ == "__main__":
    main()
